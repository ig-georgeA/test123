@page "/selection_detail"
@using System.Reactive.Subjects
@using NorthwindAPIv2
@using Models.NorthwindAPIv2
@using System.Reactive.Linq
@inject INorthwindAPIv2Service NorthwindAPIv2Service
@implements IDisposable;

<div class="row-layout selection-detail-container">
    <div class="column-layout group">
        <IgbList class="list" selection_detail-scope>
            @foreach (var item in _northwindAPIv2CustomerDto)
            {
                <IgbListItem @onclick="() => ListItemClick(item)">
                    <div slot="title">@item.CompanyName</div>
                    <div slot="subtitle">@item.CustomerId</div>
                </IgbListItem>
            }
        </IgbList>
    </div>
    <div class="column-layout group_1">
        @if (_singleSelectComboVisible1)
        {
            <IgbCombo Outlined="true" Label="Label/Placeholder" DisplayKey="CustomerId" SingleSelect="true" class="single-select-combo" selection_detail-scope></IgbCombo>
        }
        <div class="column-layout group_2">
            <IgbAvatar Shape="AvatarShape.Rounded" Size="SizableComponentSize.Medium" @onclick="@(e => _dialog1!.ToggleAsync())" class="avatar avatar_1" selection_detail-scope></IgbAvatar>
            <h4 class="h4">
                @_varCustomer?.CustomerId.ToString()
            </h4>
            <h6 class="content">
                @_varCustomer?.CompanyName.ToString()
            </h6>
            <div class="row-layout group_3">
                <p class="typography__caption content">
                    @_varCustomer?.Address.Street.ToString()
                </p>
                <p class="typography__caption content">
                    @_varCustomer?.Address.City.ToString()
                </p>
                <p class="typography__caption content">
                    @_varCustomer?.Address.Country.ToString()
                </p>
            </div>
        </div>
        <div class="column-layout group_4">
            <IgbGrid Data="@_northwindAPIv2OrderDto" PrimaryKey="OrderId" DisplayDensity="DisplayDensity.Cosy" RowSelection="GridSelectionMode.Single" AllowFiltering="true" FilterMode="FilterMode.ExcelStyleFilter" AutoGenerate="false" RowSelectionChanging="GridRowSelectionChanging" class="ig-typography grid" selection_detail-scope>
                <IgbGridToolbar>
                    <IgbGridToolbarTitle>Customer orders</IgbGridToolbarTitle>
                </IgbGridToolbar>
                <IgbColumn Field="OrderId" DataType="GridColumnDataType.Number" Header="orderId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="CustomerId" DataType="GridColumnDataType.String" Header="customerId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="EmployeeId" DataType="GridColumnDataType.Number" Header="employeeId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipperId" DataType="GridColumnDataType.Number" Header="shipperId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="OrderDate" DataType="GridColumnDataType.String" Header="orderDate" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="RequiredDate" DataType="GridColumnDataType.String" Header="requiredDate" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipVia" DataType="GridColumnDataType.Number" Header="shipVia" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="Freight" DataType="GridColumnDataType.Number" Header="freight" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipName" DataType="GridColumnDataType.String" Header="shipName" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Street" DataType="GridColumnDataType.String" Header="shipAddress street" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.City" DataType="GridColumnDataType.String" Header="shipAddress city" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Region" DataType="GridColumnDataType.String" Header="shipAddress region" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.PostalCode" DataType="GridColumnDataType.String" Header="shipAddress postalCode" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Country" DataType="GridColumnDataType.String" Header="shipAddress country" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ShipAddress.Phone" DataType="GridColumnDataType.String" Header="shipAddress phone" Sortable="true" Selectable="false"></IgbColumn>
            </IgbGrid>
            <IgbGrid Data="@_northwindAPIv2OrderDetailDto" PrimaryKey="OrderId" DisplayDensity="DisplayDensity.Cosy" AllowFiltering="true" FilterMode="FilterMode.ExcelStyleFilter" AutoGenerate="false" class="ig-typography grid" selection_detail-scope>
                <IgbGridToolbar>
                    <IgbGridToolbarTitle>Order details</IgbGridToolbarTitle>
                </IgbGridToolbar>
                <IgbColumn Field="OrderId" DataType="GridColumnDataType.Number" Header="orderId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="ProductId" DataType="GridColumnDataType.Number" Header="productId" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="UnitPrice" DataType="GridColumnDataType.Number" Header="unitPrice" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="Quantity" DataType="GridColumnDataType.Number" Header="quantity" Sortable="true" Selectable="false"></IgbColumn>
                <IgbColumn Field="Discount" DataType="GridColumnDataType.Number" Header="discount" Sortable="true" Selectable="false"></IgbColumn>
            </IgbGrid>
        </div>
    </div>
    <IgbDialog CloseOnOutsideClick="true" KeepOpenOnEscape="false" @ref="_dialog1">
        <h5 slot="title">
            Using variables in your app
        </h5>
        <IgbList class="list_1" selection_detail-scope>
            <IgbListItem>
                <IgbAvatar slot="start" Shape="AvatarShape.Circle" class="avatar_1_1" selection_detail-scope>
                    <span class="material-icons">
                        looks_one
                    </span>
                </IgbAvatar>
                <div slot="title">Create variables</div>
            </IgbListItem>
            <IgbListItem>
                <IgbAvatar slot="start" Shape="AvatarShape.Circle" class="avatar_1_2" selection_detail-scope>
                    <span class="material-icons">
                        looks_two
                    </span>
                </IgbAvatar>
                <div slot="title">Update variable value</div>
            </IgbListItem>
            <IgbListItem>
                <IgbAvatar slot="start" Shape="AvatarShape.Circle" class="avatar_1_3" selection_detail-scope>
                    <span class="material-icons">
                        looks_3
                    </span>
                </IgbAvatar>
                <div slot="title">Variable in API request</div>
            </IgbListItem>
            <IgbListItem>
                <IgbAvatar slot="start" Shape="AvatarShape.Circle" class="avatar_1_4" selection_detail-scope>
                    <span class="material-icons">
                        looks_4
                    </span>
                </IgbAvatar>
                <div slot="title">Bind component property to variable</div>
            </IgbListItem>
            <IgbListItem>
                <IgbAvatar slot="start" Shape="AvatarShape.Circle" class="avatar_1_5" selection_detail-scope>
                    <span class="material-icons">
                        looks_5
                    </span>
                </IgbAvatar>
                <div slot="title">Manage variables</div>
            </IgbListItem>
        </IgbList>
        <div slot="footer">
            <IgbButton Size="SizableComponentSize.Large" @onclick="@(e => _dialog1!.ToggleAsync())" class="button" selection_detail-scope>
                OK. Got it!
                <IgbRipple></IgbRipple>
            </IgbButton>
        </div>
    </IgbDialog>
</div>

@code {
    private double _varOrderID = 10360;
    public double VarOrderID
    {
        get { return _varOrderID; }
        set
        {
            _varOrderID = value;
            _northwindAPIv2OrderDetailDtoSubject.OnNext(value);
        }
    }

    private CustomerDto __varCustomer;
    public CustomerDto _varCustomer
    {
        get { return __varCustomer; }
        set
        {
            __varCustomer = value;
            _northwindAPIv2OrderDtoSubject.OnNext(value);
        }
    }

    private string _varCustomerID = "ALFKI";
    private List<CustomerDto> _northwindAPIv2CustomerDto = new();
    private bool _singleSelectComboVisible1 = false;
    private List<OrderDto> _northwindAPIv2OrderDto = new();
    private Subject<object> _northwindAPIv2OrderDtoSubject = new Subject<object>();

    private List<OrderDetailDto> _northwindAPIv2OrderDetailDto = new();
    private Subject<object> _northwindAPIv2OrderDetailDtoSubject = new Subject<object>();

    private IgbDialog _dialog1;
    private Subject<object> destroy = new();

    public void ListItemClick(CustomerDto item)
    {
        this._varCustomer = (CustomerDto)item;
    }

    public void GridRowSelectionChanging(IgbRowSelectionEventArgs e)
    {
        this.VarOrderID = (double)(e.Detail.NewSelection.FirstOrDefault() as OrderDto)?.OrderId;
    }

    protected override async Task OnInitializedAsync()
    {
        _varCustomer = await NorthwindAPIv2Service.GetCustomerDto("ALFKI");
        _northwindAPIv2CustomerDto = await NorthwindAPIv2Service.GetCustomerDtoList();
        _northwindAPIv2OrderDto = await NorthwindAPIv2Service.GetOrderDtoList($"{_varCustomer?.CustomerId}");
        _northwindAPIv2OrderDtoSubject.TakeUntil(this.destroy).Subscribe(async s =>         
        {
            _northwindAPIv2OrderDto = await NorthwindAPIv2Service.GetOrderDtoList($"{_varCustomer?.CustomerId}");
            await InvokeAsync(StateHasChanged);
        });
        _northwindAPIv2OrderDetailDto = await NorthwindAPIv2Service.GetOrderDetailDtoList($"{VarOrderID}");
        _northwindAPIv2OrderDetailDtoSubject.TakeUntil(this.destroy).Subscribe(async s =>         
        {
            _northwindAPIv2OrderDetailDto = await NorthwindAPIv2Service.GetOrderDetailDtoList($"{VarOrderID}");
            await InvokeAsync(StateHasChanged);
        });

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.destroy.OnNext(null);
        this.destroy.Dispose();
    }
}
